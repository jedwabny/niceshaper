# NiceShaper main configuration file.

##############
# Introduction
###

# Let's adjust internet access parameters, below in config.conf file,
# and define the hosts or classes list in class.conf. 
# Then execute the niceshaper start command. 
# It's done! Just so simple to start using NiceShaper.
# Use the niceshaper status command to observe how it works.

##############################
# Assumptions and introduction
###

# For purpose of configuration example, 
# It's assumed that the router is equipped with two interfaces:
# Eth0 - WAN side interface.
# Eth1 - LAN side interface, respectively.
# Assumed IP address assigned to eth1 interface is 192.168.0.1/24,
# thus a local LAN subnet is 192.168.0.0/24.
#
# NiceShaper uses egress shaping approach for traffic shaping. 
# Therefore, it's fundamental that classes which control the forwarded traffic
# have to be placed on the interface which is outbound for such traffic.
# So, in assumed environment, shaping of download traffic has to be
# placed on eth1, but shaping of upload traffic has to be placed on eth0.
# Why? Because, for above assumptions, downloaded packets incomes into the router
# via eth0 interface and then are sent to the local network via eth1 interface.
# It makes the eth1 the outbound interface for download.
# Explanation for opposite direction is analogical.
#
# More explanations in the "Introduction and requirements" part of documentation.

###############
# Configuration
###

# Main configuration file is divided into the sections.
#
# First one is mandatory section named "global".

<global>    

# Run functional sections listed here and configured under the global.

	run dl ul

# If NAT (SNAT/NAPT/Masquerading) is used then packets marking is supported
# in order to allow NiceShaper distinguish the host's traffic uploaded from the LAN
# unless there are only public IP addresses in the LAN (without NAT) or IMQ 
# interfaces are used for upload traffic shaping (IMQ interfaces
# as a workaround method for NAT problem is supported as well).
# Due to egress shaping rule, eth0 interface is right for uploaded packets marking.
# If not needed, comment out or remove the parameter below to reduce CPU usage.

	mark-on-ifaces eth0

# Define, space separated, list of routed local subnets.

	local-subnets 192.168.0.0/24

# Auto-hosts directive expects the pairs of functional sections connected with
# the interfaces. This directive could appear to be quite complicated, 
# but could be easier understand after looking into the class.conf file.
# Thanks to auto-hosts feature, it's easy to quickly configure traffic shaping
# using host directive within class.conf file, just by defining the list 
# of local network hosts using their IP addresses and chosen names.
# Auto-hosts directive tells the functional sections which are expected 
# to contain the classes, automatically created behind the host directive, 
# and tells the interfaces onto which such classes have to be placed.
#
# Example below means that behind each of defined hosts, two classes are 
# automatically created:
# First class - contained within dl section and placed onto the eth1 interface
# Second class - analogically, for the pair of "ul" and "eth0" values.

	auto-hosts dl eth1 ul eth0

# It could be needed to define the throughput of, at least, LAN interface.
# For example in order to allow the local traffic to be shaped at full speed.

	iface-eth1 speed 1000Mb/s

# After global section, there are needed the functional sections.
#
# Functional section reflects one certain direction of traffic.
# That's why each internet access link needs 2 functional sections.
#
# Let's configure the first functional section and name it, shortly, e.g. "dl".
# This section will handle download traffic (due to mode download parameter).

<dl>

# Set the stable truly achievable broadband throughput in download direction.

	section speed 20Mb/s 

# Set expected traffic level, where 5%-10% of achievable has to be sacrificed.

	section shape 19Mb/s

# Set section mode, depending on the section role:
# Download - designed to handle the incoming from the internet traffic.
# Upload - for opposite direction traffic.

	mode download

# Set how often adjust(reload) the classes contained within this section.
# Constant monitoring and adjusting the classes is the main point of 
# dynamic traffic shaping feature. The lower value, the better reaction 
# is obtained, but increased CPU load could be observed.
# In case of relatively slow Internet access, shared between a large
# number of hosts, adjusting should occurs as often as possible.

	reload 2s

# At the end, set some defaults for classes contained within this section.
# Just use classes' parameters.

	low 256kb/s
	ceil 5Mb/s
	strict 70

# Finally, configure the second functional section.
# Purpose is to handle the upload traffic.

<ul>
	section speed 2Mb/s shape 1800kb/s
	mode upload
	reload 1s
	low 64kb/s
	ceil 256kb/s 
	strict 50

